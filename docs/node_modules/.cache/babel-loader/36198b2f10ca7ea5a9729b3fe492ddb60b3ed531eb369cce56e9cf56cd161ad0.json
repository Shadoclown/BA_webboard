{"ast":null,"code":"var _jsxFileName = \"D:\\\\Uni\\\\ba\\\\BA_webboard\\\\cafe\\\\src\\\\component\\\\PostDetailPage.js\",\n  _s = $RefreshSig$();\n// src/components/PostDetailPage.jsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport supabase from './connect'; // Adjust the import based on your project structure\nimport '../style/PostDetail.css'; // Import CSS file\n\n// --- Helper Functions ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatDate = (dateString, includeTime = false) => {\n  if (!dateString) return '';\n  const options = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    ...(includeTime && {\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  };\n  return new Date(dateString).toLocaleDateString(undefined, options);\n};\nconst getAllImageUrls = post => {\n  const urls = [];\n  if (!post) return urls;\n  let imagesProcessedFromPostImageArray = false;\n  if (post.post_image) {\n    if (typeof post.post_image === 'string' && post.post_image.startsWith('[') && post.post_image.endsWith(']')) {\n      try {\n        const parsedImages = JSON.parse(post.post_image);\n        if (Array.isArray(parsedImages)) {\n          parsedImages.forEach(url => {\n            if (typeof url === 'string' && url.trim() !== '') urls.push(url.trim());\n          });\n          imagesProcessedFromPostImageArray = true;\n        } else if (typeof post.post_image === 'string' && post.post_image.trim() !== '') {\n          urls.push(post.post_image.trim());\n        }\n      } catch (e) {\n        if (typeof post.post_image === 'string' && post.post_image.trim() !== '') {\n          urls.push(post.post_image.trim());\n        }\n      }\n    } else if (typeof post.post_image === 'string' && post.post_image.trim() !== '') {\n      urls.push(post.post_image.trim());\n    }\n  }\n  if (!imagesProcessedFromPostImageArray) {\n    if (post.post_image_2 && typeof post.post_image_2 === 'string' && post.post_image_2.trim() !== '') {\n      urls.push(post.post_image_2.trim());\n    }\n    if (post.post_image_3 && typeof post.post_image_3 === 'string' && post.post_image_3.trim() !== '') {\n      urls.push(post.post_image_3.trim());\n    }\n  }\n  return urls;\n};\n// --- End Helper Functions ---\n\nconst PostDetailPage = () => {\n  _s();\n  var _post$user, _currentUser$email2;\n  const {\n    postId\n  } = useParams();\n  const [post, setPost] = useState(null);\n  const [loadingPost, setLoadingPost] = useState(true);\n  const [error, setError] = useState(null);\n  const [isUpdatingVotes, setIsUpdatingVotes] = useState(false);\n  const [userVote, setUserVote] = useState({\n    liked: false,\n    disliked: false\n  });\n\n  // --- Comments State ---\n  const [comments, setComments] = useState([]);\n  const [loadingComments, setLoadingComments] = useState(true);\n  const [newCommentText, setNewCommentText] = useState(''); // Renamed from newComment for clarity\n  const [isSubmittingComment, setIsSubmittingComment] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // Fetch current user session\n  useEffect(() => {\n    const getSession = async () => {\n      try {\n        const {\n          data: {\n            session\n          }\n        } = await supabase.auth.getSession();\n        console.log(\"Current session:\", session);\n        if (session && session.user) {\n          // Store the user information\n          setCurrentUser(session.user);\n\n          // Fetch additional user details if needed\n          const {\n            data: userData,\n            error: userError\n          } = await supabase.from('user').select('username').eq('user_id', session.user.id).single();\n          if (!userError && userData) {\n            // Enhance the currentUser with additional details from user table\n            setCurrentUser(prevUser => ({\n              ...prevUser,\n              username: userData.username\n            }));\n          }\n        } else {\n          setCurrentUser(null);\n        }\n      } catch (error) {\n        console.error(\"Error fetching session:\", error);\n        setCurrentUser(null);\n      }\n    };\n    getSession();\n    const {\n      data: authListener\n    } = supabase.auth.onAuthStateChange(async (_event, session) => {\n      console.log(\"Auth state changed:\", _event, session);\n      if (session && session.user) {\n        setCurrentUser(session.user);\n\n        // Fetch additional user details on auth change too\n        const {\n          data: userData,\n          error: userError\n        } = await supabase.from('user').select('username').eq('user_id', session.user.id).single();\n        if (!userError && userData) {\n          setCurrentUser(prevUser => ({\n            ...prevUser,\n            username: userData.username\n          }));\n        }\n      } else {\n        setCurrentUser(null);\n      }\n    });\n    return () => {\n      if (authListener && authListener.subscription) {\n        authListener.subscription.unsubscribe();\n      }\n    };\n  }, []);\n\n  // Fetch post details\n  useEffect(() => {\n    const fetchPostDetails = async () => {\n      if (!postId) return;\n      setLoadingPost(true);\n      setError(null);\n      try {\n        const {\n          data,\n          error: fetchError\n        } = await supabase.from('post').select(`\n            *,\n            user ( username )\n          `).eq('post_id', postId).single();\n        if (fetchError) throw fetchError;\n        if (!data) throw new Error('Post not found');\n        console.log('Post data:', data); // Debug: log the retrieved post\n        setPost(data);\n        const storedVote = localStorage.getItem(`post-${postId}-vote`);\n        if (storedVote) setUserVote(JSON.parse(storedVote));\n      } catch (err) {\n        console.error('Error fetching post details:', err);\n        setError(err.message || 'Failed to load post.');\n      } finally {\n        setLoadingPost(false);\n      }\n    };\n    fetchPostDetails();\n  }, [postId]);\n\n  // Fetch comments\n  const fetchComments = useCallback(async () => {\n    if (!postId) return;\n    setLoadingComments(true);\n    try {\n      // Simplified query to avoid join issues\n      const {\n        data,\n        error: commentsError\n      } = await supabase.from('comment').select('*').eq('post_id', postId).order('created_at', {\n        ascending: true\n      });\n      if (commentsError) throw commentsError;\n      console.log('Comments data:', data); // Debug: log the retrieved comments\n\n      // Now fetch user details separately for each comment\n      const commentsWithUsers = await Promise.all((data || []).map(async comment => {\n        if (!comment.user_id) return {\n          ...comment,\n          user: null\n        };\n        const {\n          data: userData,\n          error: userError\n        } = await supabase.from('user').select('username').eq('user_id', comment.user_id).single();\n        if (userError) {\n          console.error('Error fetching user for comment:', userError);\n          return {\n            ...comment,\n            user: null\n          };\n        }\n        return {\n          ...comment,\n          user: userData\n        };\n      }));\n      setComments(commentsWithUsers || []);\n    } catch (err) {\n      console.error('Error fetching comments:', err);\n    } finally {\n      setLoadingComments(false);\n    }\n  }, [postId]);\n  useEffect(() => {\n    fetchComments();\n  }, [fetchComments]);\n  const handleVote = async voteType => {\n    // ... (handleVote logic for post likes/dislikes - unchanged from previous version)\n    if (!post || isUpdatingVotes) return;\n    setIsUpdatingVotes(true);\n    const currentLikes = post.post_like || 0;\n    const currentDislikes = post.post_dislike || 0;\n    let newLikes = currentLikes;\n    let newDislikes = currentDislikes;\n    let newUserVote = {\n      ...userVote\n    };\n    const originalPostState = {\n      ...post\n    };\n    const originalUserVoteState = {\n      ...userVote\n    };\n    if (voteType === 'like') {\n      if (userVote.liked) {\n        newLikes = currentLikes - 1;\n        newUserVote.liked = false;\n      } else {\n        newLikes = currentLikes + 1;\n        newUserVote.liked = true;\n        if (userVote.disliked) {\n          newDislikes = currentDislikes - 1;\n          newUserVote.disliked = false;\n        }\n      }\n    } else if (voteType === 'dislike') {\n      if (userVote.disliked) {\n        newDislikes = currentDislikes - 1;\n        newUserVote.disliked = false;\n      } else {\n        newDislikes = currentDislikes + 1;\n        newUserVote.disliked = true;\n        if (userVote.liked) {\n          newLikes = currentLikes - 1;\n          newUserVote.liked = false;\n        }\n      }\n    }\n    setPost(p => ({\n      ...p,\n      post_like: Math.max(0, newLikes),\n      post_dislike: Math.max(0, newDislikes)\n    }));\n    setUserVote(newUserVote);\n    localStorage.setItem(`post-${postId}-vote`, JSON.stringify(newUserVote));\n    try {\n      const {\n        error: updateError\n      } = await supabase.from('post').update({\n        post_like: Math.max(0, newLikes),\n        post_dislike: Math.max(0, newDislikes)\n      }).eq('post_id', postId);\n      if (updateError) throw updateError;\n    } catch (err) {\n      console.error(`Error updating post vote:`, err);\n      setPost(originalPostState);\n      setUserVote(originalUserVoteState);\n      localStorage.setItem(`post-${postId}-vote`, JSON.stringify(originalUserVoteState));\n      alert(`Failed to update vote. Please try again.`);\n    } finally {\n      setIsUpdatingVotes(false);\n    }\n  };\n  const handleSubmitComment = async e => {\n    e.preventDefault();\n    if (!newCommentText.trim()) {\n      alert(\"Comment cannot be empty\");\n      return;\n    }\n    if (!currentUser) {\n      alert(\"You must be logged in to comment\");\n      return;\n    }\n    if (!postId) {\n      alert(\"Post ID is missing\");\n      return;\n    }\n    setIsSubmittingComment(true);\n    console.log(\"Submitting comment with user:\", currentUser);\n    try {\n      var _currentUser$email;\n      // First, insert the comment\n      const {\n        data: newComment,\n        error: insertError\n      } = await supabase.from('comment').insert({\n        post_id: postId,\n        user_id: currentUser.id,\n        comment_detail: newCommentText.trim(),\n        comment_like: 0,\n        comment_dislike: 0\n      }).select();\n      if (insertError) throw insertError;\n      console.log(\"Comment inserted:\", newComment);\n      if (!Array.isArray(newComment) || newComment.length === 0) {\n        throw new Error(\"Comment was inserted but no data was returned\");\n      }\n\n      // Add the new comment to the current state\n      const commentWithUser = {\n        ...newComment[0],\n        user: {\n          username: currentUser.username || ((_currentUser$email = currentUser.email) === null || _currentUser$email === void 0 ? void 0 : _currentUser$email.split('@')[0]) || 'User'\n        }\n      };\n\n      // Add to comments state\n      setComments(prevComments => [...prevComments, commentWithUser]);\n      setNewCommentText('');\n\n      // Update post's comment_count\n      if (post) {\n        const {\n          error: countError\n        } = await supabase.from('post').update({\n          comment_count: (post.comment_count || 0) + 1\n        }).eq('post_id', postId);\n        if (countError) {\n          console.error(\"Error updating post comment count:\", countError);\n        } else {\n          setPost(prevPost => ({\n            ...prevPost,\n            comment_count: (prevPost.comment_count || 0) + 1\n          }));\n        }\n      }\n    } catch (err) {\n      console.error('Error submitting comment:', err);\n      alert('Failed to submit comment: ' + (err.message || 'Unknown error'));\n    } finally {\n      setIsSubmittingComment(false);\n    }\n  };\n  if (loadingPost) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"loadingError\",\n    children: \"Loading post details...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 27\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"loadingError\",\n    children: [\"Error: \", error, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 21\n  }, this);\n  if (!post) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"loadingError\",\n    children: \"Post not found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 319,\n    columnNumber: 21\n  }, this);\n  const authorDisplayName = ((_post$user = post.user) === null || _post$user === void 0 ? void 0 : _post$user.username) || `User ID: ${post.user_id ? post.user_id.substring(0, 8) : 'N/A'}...`;\n  const allImageUrls = getAllImageUrls(post);\n\n  // Helper to display commenter name\n  const getCommenterName = commentUser => {\n    if (!commentUser) return 'Anonymous';\n    return commentUser.username || 'User';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: post.post_title || 'Untitled Post'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"meta\",\n      children: [\"By \", authorDisplayName, \" \\u2022 Published on \", formatDate(post.created_at)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this), post.post_region && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"regionTag\",\n      children: post.post_region\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: post.post_detail || 'No description available.'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), allImageUrls.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"imageGrid\",\n      children: [\" \", allImageUrls.map((url, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: url,\n        alt: `${post.post_title || 'Post'} image ${index + 1}`,\n        className: \"postImage\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 100\n      }, this)), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 36\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"imageGrid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"imagePlaceholder\",\n        children: \"No Images Available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 252\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 225\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: `actionItem ${userVote.liked ? 'activeVote' : ''} ${isUpdatingVotes ? 'disabledButton' : ''}`,\n        onClick: () => !isUpdatingVotes && handleVote('like'),\n        role: \"button\",\n        tabIndex: 0,\n        onKeyPress: e => {\n          if (!isUpdatingVotes && (e.key === 'Enter' || e.key === ' ')) handleVote('like');\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"actionButton\",\n          disabled: isUpdatingVotes,\n          children: [\"\\uD83D\\uDC4D \", post.post_like || 0]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `actionItem ${userVote.disliked ? 'activeDislike' : ''} ${isUpdatingVotes ? 'disabledButton' : ''}`,\n        onClick: () => !isUpdatingVotes && handleVote('dislike'),\n        role: \"button\",\n        tabIndex: 0,\n        onKeyPress: e => {\n          if (!isUpdatingVotes && (e.key === 'Enter' || e.key === ' ')) handleVote('dislike');\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"actionButton\",\n          disabled: isUpdatingVotes,\n          children: [\"\\uD83D\\uDC4E \", post.post_dislike || 0]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"actionItem\",\n        children: [\"\\uD83D\\uDCAC \", comments.length > 0 ? comments.length : post.comment_count || 0, \" Comments\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"commentsSection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"commentsTitle\",\n        children: [\"Comments (\", comments.length > 0 ? comments.length : post.comment_count || 0, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), currentUser ? /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmitComment,\n        className: \"commentForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"loggedInAs\",\n          children: [\"Posting as: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: currentUser.username || ((_currentUser$email2 = currentUser.email) === null || _currentUser$email2 === void 0 ? void 0 : _currentUser$email2.split('@')[0]) || 'User'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 51\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"commentTextarea\",\n          value: newCommentText,\n          onChange: e => setNewCommentText(e.target.value),\n          placeholder: \"Write a comment...\",\n          rows: \"3\",\n          disabled: isSubmittingComment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: `commentSubmitButton ${isSubmittingComment ? 'commentSubmitButtonDisabled' : ''}`,\n          disabled: isSubmittingComment,\n          children: isSubmittingComment ? 'Submitting...' : 'Submit Comment'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loginPrompt\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Please \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/login\",\n            children: \"log in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 23\n          }, this), \" to post a comment.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"loginNote\",\n          children: \"(Already logged in? Try refreshing the page.)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }, this), loadingComments && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading comments...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 29\n      }, this), !loadingComments && comments.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"noComments\",\n        children: \"No comments yet. Be the first to comment!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }, this), !loadingComments && comments.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"commentAuthor\",\n            children: getCommenterName(comment.user)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"commentDate\",\n            children: formatDate(comment.created_at, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"commentText\",\n            children: comment.comment_detail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"commentActions\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"commentActionItem\",\n              children: [\"\\uD83D\\uDC4D \", comment.comment_like || 0]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"commentActionItem\",\n              children: [\"\\uD83D\\uDC4E \", comment.comment_dislike || 0]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 17\n          }, this)]\n        }, comment.comment_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"backLink\",\n      children: \"\\u2190 Back to Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 5\n  }, this);\n};\n_s(PostDetailPage, \"MPU/iUblJpay9rmgcJB7cwU0h48=\", false, function () {\n  return [useParams];\n});\n_c = PostDetailPage;\nexport default PostDetailPage;\nvar _c;\n$RefreshReg$(_c, \"PostDetailPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","Link","supabase","jsxDEV","_jsxDEV","formatDate","dateString","includeTime","options","year","month","day","hour","minute","Date","toLocaleDateString","undefined","getAllImageUrls","post","urls","imagesProcessedFromPostImageArray","post_image","startsWith","endsWith","parsedImages","JSON","parse","Array","isArray","forEach","url","trim","push","e","post_image_2","post_image_3","PostDetailPage","_s","_post$user","_currentUser$email2","postId","setPost","loadingPost","setLoadingPost","error","setError","isUpdatingVotes","setIsUpdatingVotes","userVote","setUserVote","liked","disliked","comments","setComments","loadingComments","setLoadingComments","newCommentText","setNewCommentText","isSubmittingComment","setIsSubmittingComment","currentUser","setCurrentUser","getSession","data","session","auth","console","log","user","userData","userError","from","select","eq","id","single","prevUser","username","authListener","onAuthStateChange","_event","subscription","unsubscribe","fetchPostDetails","fetchError","Error","storedVote","localStorage","getItem","err","message","fetchComments","commentsError","order","ascending","commentsWithUsers","Promise","all","map","comment","user_id","handleVote","voteType","currentLikes","post_like","currentDislikes","post_dislike","newLikes","newDislikes","newUserVote","originalPostState","originalUserVoteState","p","Math","max","setItem","stringify","updateError","update","alert","handleSubmitComment","preventDefault","_currentUser$email","newComment","insertError","insert","post_id","comment_detail","comment_like","comment_dislike","length","commentWithUser","email","split","prevComments","countError","comment_count","prevPost","className","children","fileName","_jsxFileName","lineNumber","columnNumber","authorDisplayName","substring","allImageUrls","getCommenterName","commentUser","post_title","created_at","post_region","post_detail","index","src","alt","onClick","role","tabIndex","onKeyPress","key","disabled","onSubmit","value","onChange","target","placeholder","rows","type","to","comment_id","_c","$RefreshReg$"],"sources":["D:/Uni/ba/BA_webboard/cafe/src/component/PostDetailPage.js"],"sourcesContent":["// src/components/PostDetailPage.jsx\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport supabase from './connect'; // Adjust the import based on your project structure\r\nimport '../style/PostDetail.css'; // Import CSS file\r\n\r\n// --- Helper Functions ---\r\nconst formatDate = (dateString, includeTime = false) => {\r\n  if (!dateString) return '';\r\n  const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    ...(includeTime && { hour: '2-digit', minute: '2-digit' })\r\n  };\r\n  return new Date(dateString).toLocaleDateString(undefined, options);\r\n};\r\n\r\nconst getAllImageUrls = (post) => {\r\n    const urls = [];\r\n    if (!post) return urls;\r\n    let imagesProcessedFromPostImageArray = false;\r\n    if (post.post_image) {\r\n        if (typeof post.post_image === 'string' && post.post_image.startsWith('[') && post.post_image.endsWith(']')) {\r\n            try {\r\n                const parsedImages = JSON.parse(post.post_image);\r\n                if (Array.isArray(parsedImages)) {\r\n                    parsedImages.forEach(url => { if (typeof url === 'string' && url.trim() !== '') urls.push(url.trim()); });\r\n                    imagesProcessedFromPostImageArray = true;\r\n                } else if (typeof post.post_image === 'string' && post.post_image.trim() !== '') { urls.push(post.post_image.trim()); }\r\n            } catch (e) { if (typeof post.post_image === 'string' && post.post_image.trim() !== '') { urls.push(post.post_image.trim()); } }\r\n        } else if (typeof post.post_image === 'string' && post.post_image.trim() !== '') { urls.push(post.post_image.trim()); }\r\n    }\r\n    if (!imagesProcessedFromPostImageArray) {\r\n        if (post.post_image_2 && typeof post.post_image_2 === 'string' && post.post_image_2.trim() !== '') { urls.push(post.post_image_2.trim()); }\r\n        if (post.post_image_3 && typeof post.post_image_3 === 'string' && post.post_image_3.trim() !== '') { urls.push(post.post_image_3.trim()); }\r\n    }\r\n    return urls;\r\n};\r\n// --- End Helper Functions ---\r\n\r\n\r\nconst PostDetailPage = () => {\r\n  const { postId } = useParams();\r\n  const [post, setPost] = useState(null);\r\n  const [loadingPost, setLoadingPost] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isUpdatingVotes, setIsUpdatingVotes] = useState(false);\r\n  const [userVote, setUserVote] = useState({ liked: false, disliked: false });\r\n\r\n  // --- Comments State ---\r\n  const [comments, setComments] = useState([]);\r\n  const [loadingComments, setLoadingComments] = useState(true);\r\n  const [newCommentText, setNewCommentText] = useState(''); // Renamed from newComment for clarity\r\n  const [isSubmittingComment, setIsSubmittingComment] = useState(false);\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n\r\n  // Fetch current user session\r\n  useEffect(() => {\r\n    const getSession = async () => {\r\n      try {\r\n        const { data: { session } } = await supabase.auth.getSession();\r\n        console.log(\"Current session:\", session);\r\n        \r\n        if (session && session.user) {\r\n          // Store the user information\r\n          setCurrentUser(session.user);\r\n          \r\n          // Fetch additional user details if needed\r\n          const { data: userData, error: userError } = await supabase\r\n            .from('user')\r\n            .select('username')\r\n            .eq('user_id', session.user.id)\r\n            .single();\r\n            \r\n          if (!userError && userData) {\r\n            // Enhance the currentUser with additional details from user table\r\n            setCurrentUser(prevUser => ({ \r\n              ...prevUser, \r\n              username: userData.username \r\n            }));\r\n          }\r\n        } else {\r\n          setCurrentUser(null);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching session:\", error);\r\n        setCurrentUser(null);\r\n      }\r\n    };\r\n    \r\n    getSession();\r\n\r\n    const { data: authListener } = supabase.auth.onAuthStateChange(\r\n      async (_event, session) => {\r\n        console.log(\"Auth state changed:\", _event, session);\r\n        if (session && session.user) {\r\n          setCurrentUser(session.user);\r\n          \r\n          // Fetch additional user details on auth change too\r\n          const { data: userData, error: userError } = await supabase\r\n            .from('user')\r\n            .select('username')\r\n            .eq('user_id', session.user.id)\r\n            .single();\r\n            \r\n          if (!userError && userData) {\r\n            setCurrentUser(prevUser => ({ \r\n              ...prevUser, \r\n              username: userData.username \r\n            }));\r\n          }\r\n        } else {\r\n          setCurrentUser(null);\r\n        }\r\n      }\r\n    );\r\n    \r\n    return () => {\r\n      if (authListener && authListener.subscription) {\r\n        authListener.subscription.unsubscribe();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Fetch post details\r\n  useEffect(() => {\r\n    const fetchPostDetails = async () => {\r\n      if (!postId) return;\r\n      setLoadingPost(true);\r\n      setError(null);\r\n      try {\r\n        const { data, error: fetchError } = await supabase\r\n          .from('post')\r\n          .select(`\r\n            *,\r\n            user ( username )\r\n          `)\r\n          .eq('post_id', postId)\r\n          .single();\r\n\r\n        if (fetchError) throw fetchError;\r\n        if (!data) throw new Error('Post not found');\r\n        console.log('Post data:', data); // Debug: log the retrieved post\r\n        setPost(data);\r\n        const storedVote = localStorage.getItem(`post-${postId}-vote`);\r\n        if (storedVote) setUserVote(JSON.parse(storedVote));\r\n      } catch (err) {\r\n        console.error('Error fetching post details:', err);\r\n        setError(err.message || 'Failed to load post.');\r\n      } finally {\r\n        setLoadingPost(false);\r\n      }\r\n    };\r\n    fetchPostDetails();\r\n  }, [postId]);\r\n\r\n  // Fetch comments\r\n  const fetchComments = useCallback(async () => {\r\n    if (!postId) return;\r\n    setLoadingComments(true);\r\n    try {\r\n      // Simplified query to avoid join issues\r\n      const { data, error: commentsError } = await supabase\r\n        .from('comment')\r\n        .select('*')\r\n        .eq('post_id', postId)\r\n        .order('created_at', { ascending: true });\r\n\r\n      if (commentsError) throw commentsError;\r\n      console.log('Comments data:', data); // Debug: log the retrieved comments\r\n      \r\n      // Now fetch user details separately for each comment\r\n      const commentsWithUsers = await Promise.all(\r\n        (data || []).map(async (comment) => {\r\n          if (!comment.user_id) return { ...comment, user: null };\r\n          \r\n          const { data: userData, error: userError } = await supabase\r\n            .from('user')\r\n            .select('username')\r\n            .eq('user_id', comment.user_id)\r\n            .single();\r\n            \r\n          if (userError) {\r\n            console.error('Error fetching user for comment:', userError);\r\n            return { ...comment, user: null };\r\n          }\r\n          \r\n          return { ...comment, user: userData };\r\n        })\r\n      );\r\n      \r\n      setComments(commentsWithUsers || []);\r\n    } catch (err) {\r\n      console.error('Error fetching comments:', err);\r\n    } finally {\r\n      setLoadingComments(false);\r\n    }\r\n  }, [postId]);\r\n\r\n  useEffect(() => {\r\n    fetchComments();\r\n  }, [fetchComments]);\r\n\r\n\r\n  const handleVote = async (voteType) => {\r\n    // ... (handleVote logic for post likes/dislikes - unchanged from previous version)\r\n    if (!post || isUpdatingVotes) return;\r\n    setIsUpdatingVotes(true);\r\n    const currentLikes = post.post_like || 0;\r\n    const currentDislikes = post.post_dislike || 0;\r\n    let newLikes = currentLikes;\r\n    let newDislikes = currentDislikes;\r\n    let newUserVote = { ...userVote };\r\n    const originalPostState = { ...post };\r\n    const originalUserVoteState = { ...userVote };\r\n\r\n    if (voteType === 'like') {\r\n      if (userVote.liked) { newLikes = currentLikes - 1; newUserVote.liked = false; }\r\n      else { newLikes = currentLikes + 1; newUserVote.liked = true;\r\n        if (userVote.disliked) { newDislikes = currentDislikes - 1; newUserVote.disliked = false;}\r\n      }\r\n    } else if (voteType === 'dislike') {\r\n      if (userVote.disliked) { newDislikes = currentDislikes - 1; newUserVote.disliked = false; }\r\n      else { newDislikes = currentDislikes + 1; newUserVote.disliked = true;\r\n        if (userVote.liked) { newLikes = currentLikes - 1; newUserVote.liked = false; }\r\n      }\r\n    }\r\n    setPost(p => ({...p, post_like: Math.max(0, newLikes), post_dislike: Math.max(0, newDislikes)}));\r\n    setUserVote(newUserVote);\r\n    localStorage.setItem(`post-${postId}-vote`, JSON.stringify(newUserVote));\r\n    try {\r\n      const { error: updateError } = await supabase.from('post').update({ post_like: Math.max(0, newLikes), post_dislike: Math.max(0, newDislikes) }).eq('post_id', postId);\r\n      if (updateError) throw updateError;\r\n    } catch (err) {\r\n      console.error(`Error updating post vote:`, err);\r\n      setPost(originalPostState); setUserVote(originalUserVoteState); localStorage.setItem(`post-${postId}-vote`, JSON.stringify(originalUserVoteState));\r\n      alert(`Failed to update vote. Please try again.`);\r\n    } finally { setIsUpdatingVotes(false); }\r\n  };\r\n\r\n  const handleSubmitComment = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!newCommentText.trim()) {\r\n      alert(\"Comment cannot be empty\");\r\n      return;\r\n    }\r\n    \r\n    if (!currentUser) {\r\n      alert(\"You must be logged in to comment\");\r\n      return;\r\n    }\r\n    \r\n    if (!postId) {\r\n      alert(\"Post ID is missing\");\r\n      return;\r\n    }\r\n    \r\n    setIsSubmittingComment(true);\r\n    console.log(\"Submitting comment with user:\", currentUser);\r\n\r\n    try {\r\n      // First, insert the comment\r\n      const { data: newComment, error: insertError } = await supabase\r\n        .from('comment')\r\n        .insert({\r\n          post_id: postId,\r\n          user_id: currentUser.id,\r\n          comment_detail: newCommentText.trim(),\r\n          comment_like: 0,\r\n          comment_dislike: 0\r\n        })\r\n        .select();\r\n\r\n      if (insertError) throw insertError;\r\n      console.log(\"Comment inserted:\", newComment);\r\n\r\n      if (!Array.isArray(newComment) || newComment.length === 0) {\r\n        throw new Error(\"Comment was inserted but no data was returned\");\r\n      }\r\n\r\n      // Add the new comment to the current state\r\n      const commentWithUser = {\r\n        ...newComment[0],\r\n        user: { username: currentUser.username || currentUser.email?.split('@')[0] || 'User' }\r\n      };\r\n\r\n      // Add to comments state\r\n      setComments(prevComments => [...prevComments, commentWithUser]);\r\n      setNewCommentText('');\r\n\r\n      // Update post's comment_count\r\n      if (post) {\r\n        const { error: countError } = await supabase\r\n          .from('post')\r\n          .update({ comment_count: (post.comment_count || 0) + 1 })\r\n          .eq('post_id', postId);\r\n          \r\n        if (countError) {\r\n          console.error(\"Error updating post comment count:\", countError);\r\n        } else {\r\n          setPost(prevPost => ({ \r\n            ...prevPost, \r\n            comment_count: (prevPost.comment_count || 0) + 1 \r\n          }));\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Error submitting comment:', err);\r\n      alert('Failed to submit comment: ' + (err.message || 'Unknown error'));\r\n    } finally {\r\n      setIsSubmittingComment(false);\r\n    }\r\n  };\r\n\r\n  if (loadingPost) return <p className=\"loadingError\">Loading post details...</p>;\r\n  if (error) return <p className=\"loadingError\">Error: {error} </p>;\r\n  if (!post) return <p className=\"loadingError\">Post not found.</p>;\r\n\r\n  const authorDisplayName = post.user?.username || `User ID: ${post.user_id ? post.user_id.substring(0, 8) : 'N/A'}...`;\r\n  const allImageUrls = getAllImageUrls(post);\r\n\r\n  // Helper to display commenter name\r\n  const getCommenterName = (commentUser) => {\r\n    if (!commentUser) return 'Anonymous';\r\n    return commentUser.username || 'User';\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {/* ... Post Title, Meta, Description, Images, Actions ... */}\r\n      <h1 className=\"title\">{post.post_title || 'Untitled Post'}</h1>\r\n      <p className=\"meta\">\r\n        By {authorDisplayName} • Published on {formatDate(post.created_at)}\r\n      </p>\r\n      {post.post_region && <span className=\"regionTag\">{post.post_region}</span>}\r\n      <div className=\"description\">{post.post_detail || 'No description available.'}</div>\r\n      {allImageUrls.length > 0 ? ( <div className=\"imageGrid\"> {allImageUrls.map((url, index) => ( <img key={index} src={url} alt={`${post.post_title || 'Post'} image ${index + 1}`} className=\"postImage\" /> ))} </div> ) : ( <div className=\"imageGrid\"><div className=\"imagePlaceholder\">No Images Available</div></div> )}\r\n      <div className=\"actions\">\r\n        <span className={`actionItem ${userVote.liked ? 'activeVote' : ''} ${isUpdatingVotes ? 'disabledButton' : ''}`} onClick={() => !isUpdatingVotes && handleVote('like')} role=\"button\" tabIndex={0} onKeyPress={(e) => { if (!isUpdatingVotes && (e.key === 'Enter' || e.key === ' ')) handleVote('like'); }}>\r\n          <button className=\"actionButton\" disabled={isUpdatingVotes}>👍 {post.post_like || 0}</button>\r\n        </span>\r\n        <span className={`actionItem ${userVote.disliked ? 'activeDislike' : ''} ${isUpdatingVotes ? 'disabledButton' : ''}`} onClick={() => !isUpdatingVotes && handleVote('dislike')} role=\"button\" tabIndex={0} onKeyPress={(e) => { if (!isUpdatingVotes && (e.key === 'Enter' || e.key === ' ')) handleVote('dislike'); }}>\r\n          <button className=\"actionButton\" disabled={isUpdatingVotes}>👎 {post.post_dislike || 0}</button>\r\n        </span>\r\n        {/* Use fetched comments length for a more reactive count */}\r\n        <span className=\"actionItem\">💬 {comments.length > 0 ? comments.length : (post.comment_count || 0)} Comments</span>\r\n      </div>\r\n\r\n      {/* --- Comments Section --- */}\r\n      <div className=\"commentsSection\">\r\n        <h2 className=\"commentsTitle\">Comments ({comments.length > 0 ? comments.length : (post.comment_count || 0)})</h2>\r\n        \r\n        {/* Comment Form */}\r\n        {currentUser ? (\r\n          <form onSubmit={handleSubmitComment} className=\"commentForm\">\r\n            <p className=\"loggedInAs\">Posting as: <strong>{currentUser.username || currentUser.email?.split('@')[0] || 'User'}</strong></p>\r\n            <textarea\r\n              className=\"commentTextarea\"\r\n              value={newCommentText}\r\n              onChange={(e) => setNewCommentText(e.target.value)}\r\n              placeholder=\"Write a comment...\"\r\n              rows=\"3\"\r\n              disabled={isSubmittingComment}\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className={`commentSubmitButton ${isSubmittingComment ? 'commentSubmitButtonDisabled' : ''}`}\r\n              disabled={isSubmittingComment}\r\n            >\r\n              {isSubmittingComment ? 'Submitting...' : 'Submit Comment'}\r\n            </button>\r\n          </form>\r\n        ) : (\r\n          <div className=\"loginPrompt\">\r\n            <p>Please <Link to=\"/login\">log in</Link> to post a comment.</p>\r\n            <p className=\"loginNote\">(Already logged in? Try refreshing the page.)</p>\r\n          </div>\r\n        )}\r\n\r\n        {loadingComments && <p>Loading comments...</p>}\r\n        {!loadingComments && comments.length === 0 && (\r\n          <p className=\"noComments\">No comments yet. Be the first to comment!</p>\r\n        )}\r\n        {!loadingComments && comments.length > 0 && (\r\n          <div>\r\n            {comments.map((comment) => (\r\n              <div key={comment.comment_id} className=\"comment\">\r\n                <p className=\"commentAuthor\">\r\n                  {getCommenterName(comment.user)}\r\n                </p>\r\n                <p className=\"commentDate\">\r\n                  {formatDate(comment.created_at, true)}\r\n                </p>\r\n                <p className=\"commentText\">{comment.comment_detail}</p>\r\n                <div className=\"commentActions\">\r\n                  <span className=\"commentActionItem\">👍 {comment.comment_like || 0}</span>\r\n                  <span className=\"commentActionItem\">👎 {comment.comment_dislike || 0}</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n      {/* --- End Comments Section --- */}\r\n\r\n      <Link to=\"/\" className=\"backLink\">← Back to Home</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostDetailPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}