{"ast":null,"code":"var _jsxFileName = \"D:\\\\Uni\\\\ba\\\\BA_webboard\\\\cafe\\\\src\\\\component\\\\MostLikedPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport supabase from './connect';\nimport { useNavigate } from 'react-router-dom';\nimport '../style/MostLikedPage.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MostLikedPage = () => {\n  _s();\n  const [topPosts, setTopPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('Most Liked');\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetchMostLikedPosts();\n  }, []);\n  const fetchMostLikedPosts = async () => {\n    try {\n      setLoading(true);\n\n      // Fetch posts ordered by likes (descending)\n      const {\n        data,\n        error\n      } = await supabase.from('post').select(`\n          *,\n          user:user_id (username)\n        `).order('post_like', {\n        ascending: false\n      }).limit(10);\n      if (error) throw error;\n      setTopPosts(data || []);\n    } catch (error) {\n      console.error('Error fetching most liked posts:', error);\n      alert('Error fetching posts. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleTabClick = tabName => {\n    setActiveTab(tabName);\n    if (tabName === 'For You') {\n      navigate('/for-you');\n    } else if (tabName === 'Most Liked') {\n      // Stay on current page - already at most-like\n    } else if (tabName === 'Top 5') {\n      navigate('/top-5');\n    }\n  };\n  const handleLike = async postId => {\n    try {\n      // Check if user is logged in\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (!user) {\n        alert('Please log in to like posts');\n        return;\n      }\n\n      // Update post likes in the database\n      const {\n        error\n      } = await supabase.from('post').update({\n        post_like: topPosts.find(post => post.post_id === postId).post_like + 1\n      }).eq('post_id', postId);\n      if (error) throw error;\n\n      // Update local state\n      setTopPosts(topPosts.map(post => post.post_id === postId ? {\n        ...post,\n        post_like: post.post_like + 1\n      } : post));\n    } catch (error) {\n      console.error('Error liking post:', error);\n      alert('Error liking post. Please try again.');\n    }\n  };\n  const formatDate = dateString => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    const month = date.toLocaleString('default', {\n      month: 'short'\n    });\n    const day = date.getDate();\n    return `${month} ${day}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"most-liked-container\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"section-title\",\n        children: \"Top 10 Caf\\xE9s & Restaurants (Most Liked)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-10-list\",\n        children: topPosts.slice(0, 10).map((post, index) => {\n          var _post$user;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"top-10-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"rank\",\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"post-title\",\n                children: post.post_title || 'Untitled Post'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"post-meta\",\n                children: [\"by \", ((_post$user = post.user) === null || _post$user === void 0 ? void 0 : _post$user.username) || 'Anonymous', \" \\u2022 \", post.post_region || 'Unknown Region']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"like-section\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"like-count\",\n                children: [post.post_like || 0, \"k\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this)]\n          }, post.post_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(MostLikedPage, \"K0Q/GLk74G5zVBf15SCYKa7go2I=\", false, function () {\n  return [useNavigate];\n});\n_c = MostLikedPage;\nexport default MostLikedPage;\nvar _c;\n$RefreshReg$(_c, \"MostLikedPage\");","map":{"version":3,"names":["React","useEffect","useState","supabase","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","MostLikedPage","_s","topPosts","setTopPosts","loading","setLoading","activeTab","setActiveTab","navigate","fetchMostLikedPosts","data","error","from","select","order","ascending","limit","console","alert","handleTabClick","tabName","handleLike","postId","user","auth","getUser","update","post_like","find","post","post_id","eq","map","formatDate","dateString","date","Date","month","toLocaleString","day","getDate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","slice","index","_post$user","post_title","username","post_region","_c","$RefreshReg$"],"sources":["D:/Uni/ba/BA_webboard/cafe/src/component/MostLikedPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport supabase from './connect';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../style/MostLikedPage.css';\r\n\r\nconst MostLikedPage = () => {\r\n  const [topPosts, setTopPosts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [activeTab, setActiveTab] = useState('Most Liked');\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetchMostLikedPosts();\r\n  }, []);\r\n\r\n  const fetchMostLikedPosts = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Fetch posts ordered by likes (descending)\r\n      const { data, error } = await supabase\r\n        .from('post')\r\n        .select(`\r\n          *,\r\n          user:user_id (username)\r\n        `)\r\n        .order('post_like', { ascending: false })\r\n        .limit(10);\r\n        \r\n      if (error) throw error;\r\n      setTopPosts(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching most liked posts:', error);\r\n      alert('Error fetching posts. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleTabClick = (tabName) => {\r\n    setActiveTab(tabName);\r\n    if (tabName === 'For You') {\r\n      navigate('/for-you');\r\n    } else if (tabName === 'Most Liked') {\r\n      // Stay on current page - already at most-like\r\n    } else if (tabName === 'Top 5') {\r\n      navigate('/top-5');\r\n    }\r\n  };\r\n\r\n  const handleLike = async (postId) => {\r\n    try {\r\n      // Check if user is logged in\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      \r\n      if (!user) {\r\n        alert('Please log in to like posts');\r\n        return;\r\n      }\r\n      \r\n      // Update post likes in the database\r\n      const { error } = await supabase\r\n        .from('post')\r\n        .update({ post_like: topPosts.find(post => post.post_id === postId).post_like + 1 })\r\n        .eq('post_id', postId);\r\n        \r\n      if (error) throw error;\r\n      \r\n      // Update local state\r\n      setTopPosts(topPosts.map(post => \r\n        post.post_id === postId \r\n          ? { ...post, post_like: post.post_like + 1 } \r\n          : post\r\n      ));\r\n    } catch (error) {\r\n      console.error('Error liking post:', error);\r\n      alert('Error liking post. Please try again.');\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return '';\r\n    const date = new Date(dateString);\r\n    const month = date.toLocaleString('default', { month: 'short' });\r\n    const day = date.getDate();\r\n    return `${month} ${day}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"most-liked-container\">\r\n      {/* <h1 className=\"explore-title\">Explore Cafes and Restaurants</h1>\r\n      \r\n      <div className=\"tabs-container\">\r\n        <div \r\n          className={`tab ${activeTab === 'For You' ? 'active' : ''}`}\r\n          onClick={() => handleTabClick('For You')}\r\n        >\r\n          For You\r\n        </div>\r\n        <div \r\n          className={`tab ${activeTab === 'Most Liked' ? 'active' : ''}`}\r\n          onClick={() => handleTabClick('Most Liked')}\r\n        >\r\n          Most Liked\r\n        </div>\r\n        <div \r\n          className={`tab ${activeTab === 'Top 5' ? 'active' : ''}`}\r\n          onClick={() => handleTabClick('Top 5')}\r\n        >\r\n          Top 5\r\n        </div>\r\n      </div> */}\r\n      \r\n      {loading ? (\r\n        <div className=\"loading\">Loading...</div>\r\n      ) : (\r\n        <>\r\n          <h2 className=\"section-title\">Top 10 Cafés & Restaurants (Most Liked)</h2>\r\n          \r\n          <div className=\"top-10-list\">\r\n            {topPosts.slice(0, 10).map((post, index) => (\r\n              <div key={post.post_id} className=\"top-10-item\">\r\n                <div className=\"rank\">{index + 1}</div>\r\n                <div className=\"post-details\">\r\n                  <h3 className=\"post-title\">{post.post_title || 'Untitled Post'}</h3>\r\n                  <p className=\"post-meta\">\r\n                    by {post.user?.username || 'Anonymous'} • {post.post_region || 'Unknown Region'}\r\n                  </p>\r\n                </div>\r\n                <div className=\"like-section\">\r\n                  <span className=\"like-count\">{post.post_like || 0}k</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MostLikedPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}