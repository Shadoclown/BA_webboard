{"ast":null,"code":"var _jsxFileName = \"D:\\\\Uni\\\\ba\\\\BA_webboard\\\\cafe\\\\src\\\\component\\\\CreateReview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport supabase from './connect'; // Make sure this path is correct\nimport '../style/CreateReview.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateReview = () => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [reviewText, setReviewText] = useState('');\n  const [selectedRegion, setSelectedRegion] = useState(null);\n  const [imageFiles, setImageFiles] = useState([]); // Changed to array\n  const [imagePreviewUrls, setImagePreviewUrls] = useState([]); // Changed to array\n  const [uploading, setUploading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n  const [successMsg, setSuccessMsg] = useState('');\n  const regions = ['North', 'South', 'Central', 'West', 'East'];\n  const MAX_FILE_SIZE_MB = 5;\n  const MAX_TOTAL_FILES = 5; // Optional: Limit total number of files\n\n  useEffect(() => {\n    // Clean up object URLs for image previews\n    return () => {\n      imagePreviewUrls.forEach(url => URL.revokeObjectURL(url));\n    };\n  }, [imagePreviewUrls]); // Dependency on the array itself\n\n  const handleImageChange = e => {\n    setErrorMsg('');\n    setSuccessMsg('');\n    const files = e.target.files ? Array.from(e.target.files) : [];\n    if (!files.length) {\n      // Clear existing if no new files are chosen (e.g., user cancels file dialog)\n      // Or, you might want to append if that's the desired UX.\n      // For simplicity, let's replace.\n      imagePreviewUrls.forEach(url => URL.revokeObjectURL(url));\n      setImageFiles([]);\n      setImagePreviewUrls([]);\n      return;\n    }\n\n    // Optional: Limit total number of files\n    if (files.length > MAX_TOTAL_FILES) {\n      setErrorMsg(`You can upload a maximum of ${MAX_TOTAL_FILES} images.`);\n      e.target.value = null; // Reset file input\n      return;\n    }\n    const newImageFiles = [];\n    const newPreviewUrls = [];\n    let validationError = false;\n    for (const file of files) {\n      if (file.size > MAX_FILE_SIZE_MB * 1024 * 1024) {\n        setErrorMsg(`Image \"${file.name}\" exceeds ${MAX_FILE_SIZE_MB}MB limit.`);\n        validationError = true;\n        break; // Stop processing further files\n      }\n      newImageFiles.push(file);\n    }\n    if (validationError) {\n      // Don't set any files if one is invalid\n      imagePreviewUrls.forEach(url => URL.revokeObjectURL(url)); // Revoke any previous previews\n      setImageFiles([]);\n      setImagePreviewUrls([]);\n      e.target.value = null; // Reset file input\n      return;\n    }\n\n    // Revoke old URLs before creating new ones\n    imagePreviewUrls.forEach(url => URL.revokeObjectURL(url));\n\n    // Create new preview URLs\n    newImageFiles.forEach(file => newPreviewUrls.push(URL.createObjectURL(file)));\n    setImageFiles(newImageFiles);\n    setImagePreviewUrls(newPreviewUrls);\n  };\n  const resetForm = () => {\n    setTitle('');\n    setReviewText('');\n    setSelectedRegion(null);\n    setImageFiles([]);\n    imagePreviewUrls.forEach(url => URL.revokeObjectURL(url)); // Clean up\n    setImagePreviewUrls([]);\n    // Reset file input visually\n    const fileInput = document.getElementById('images'); // Note ID change if you change it\n    if (fileInput) fileInput.value = null;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setUploading(true);\n    setErrorMsg('');\n    setSuccessMsg('');\n    if (!title || !reviewText || !selectedRegion) {\n      setErrorMsg('Please fill in Title, Review, and select a Region.');\n      setUploading(false);\n      return;\n    }\n    const cleanRegion = selectedRegion === null || selectedRegion === void 0 ? void 0 : selectedRegion.replace(/[0-9]/g, '');\n    const uploadedImagePublicUrls = [];\n\n    // 1. Upload images if selected\n    if (imageFiles.length > 0) {\n      const uploadPromises = imageFiles.map(async file => {\n        const fileExt = file.name.split('.').pop();\n        // Add more uniqueness to filename to avoid collisions if multiple users upload simultaneously\n        const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 10)}.${fileExt}`;\n        const filePath = `public/${fileName}`; // Path in bucket\n\n        const {\n          error: uploadError\n        } = await supabase.storage.from('image') // YOUR_BUCKET_NAME\n        .upload(filePath, file, {\n          cacheControl: '3600',\n          upsert: false // Important: false to avoid overwriting if a hash collision somehow occurs\n        });\n        if (uploadError) {\n          console.error(`Image Upload Error for ${file.name}:`, uploadError);\n          // Throw an error to be caught by Promise.all\n          throw new Error(`Failed to upload ${file.name}: ${uploadError.message}`);\n        }\n        const {\n          data: urlData\n        } = supabase.storage.from('image') // YOUR_BUCKET_NAME\n        .getPublicUrl(filePath);\n        if (!urlData || !urlData.publicUrl) {\n          console.error(`Error getting public URL for ${file.name}`);\n          throw new Error(`Image ${file.name} uploaded, but could not get its URL.`);\n        }\n        return urlData.publicUrl;\n      });\n      try {\n        const urls = await Promise.all(uploadPromises);\n        uploadedImagePublicUrls.push(...urls);\n      } catch (error) {\n        // Error from one of the promises in Promise.all\n        setErrorMsg(error.message + ' Review not posted.');\n        setUploading(false);\n        return;\n      }\n    }\n\n    // 2. Prepare review data\n    const reviewData = {\n      post_title: title,\n      post_detail: reviewText,\n      post_region: cleanRegion,\n      comment_count: 0,\n      // Initialize comment count to 0\n      post_like: 0,\n      // Initialize likes to 0\n      post_dislike: 0 // Initialize dislikes to 0\n      // user_id: supabase.auth.user()?.id, // Example\n    };\n    if (uploadedImagePublicUrls.length > 0) {\n      // IMPORTANT: Ensure 'post' table has a column like 'post_image_urls' (TEXT[] type)\n      reviewData.post_image = uploadedImagePublicUrls;\n    }\n\n    // 3. Insert review into the database\n    const {\n      data: insertData,\n      error: insertError\n    } = await supabase.from('post') // YOUR_TABLE_NAME for reviews\n    .insert([reviewData]).select();\n    setUploading(false);\n    if (insertError) {\n      console.error('Insert Error:', insertError);\n      setErrorMsg(`Failed to post review: ${insertError.message}. Check console. Possible issues: RLS, missing/mismatched columns (e.g., 'post_image_urls' not TEXT[]).`);\n    } else {\n      console.log('Inserted Review:', insertData);\n      setSuccessMsg('Review posted successfully!');\n      resetForm();\n    }\n  };\n  const handleCancel = () => {\n    resetForm();\n    setErrorMsg('');\n    setSuccessMsg('');\n    console.log('Form cancelled');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"formCard\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"heading\",\n        children: \"Create New Review\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), errorMsg && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"errorText\",\n        children: errorMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 22\n      }, this), successMsg && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"successText\",\n        children: successMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"title\",\n            className: \"label\",\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"title\",\n            className: \"input\",\n            placeholder: \"E.g. Amazing Italian Restaurant in Downtown\",\n            value: title,\n            onChange: e => setTitle(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"label\",\n            children: \"Region\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"regionContainer\",\n            children: regions.map((region, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: `regionButton ${selectedRegion === region + index ? 'selectedRegionButton' : ''}`,\n              onClick: () => {\n                setSelectedRegion(region + index);\n                setErrorMsg('');\n              },\n              children: region\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"review\",\n            className: \"label\",\n            children: \"Review\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"review\",\n            className: \"textarea\",\n            placeholder: \"Share your experience...\",\n            value: reviewText,\n            onChange: e => setReviewText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"images\",\n            className: \"label\",\n            children: [\"Upload Images (Optional, max \", MAX_FILE_SIZE_MB, \"MB each, \", MAX_TOTAL_FILES, \" files max)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"images\",\n            accept: \"image/png, image/jpeg, image/gif\",\n            multiple: true,\n            onChange: handleImageChange,\n            className: \"input\",\n            disabled: uploading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), imagePreviewUrls.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"imagePreviewContainer\",\n            children: imagePreviewUrls.map((url, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n              src: url,\n              alt: `Preview ${index + 1}`,\n              className: \"imagePreview\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttonContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"cancelButton\",\n            onClick: handleCancel,\n            disabled: uploading,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"postButton\",\n            disabled: uploading,\n            children: uploading ? 'Posting...' : 'Post Review'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateReview, \"q93PLosAHBPfCye49hsrOfo6dIQ=\");\n_c = CreateReview;\nexport default CreateReview;\nvar _c;\n$RefreshReg$(_c, \"CreateReview\");","map":{"version":3,"names":["React","useState","useEffect","supabase","jsxDEV","_jsxDEV","CreateReview","_s","title","setTitle","reviewText","setReviewText","selectedRegion","setSelectedRegion","imageFiles","setImageFiles","imagePreviewUrls","setImagePreviewUrls","uploading","setUploading","errorMsg","setErrorMsg","successMsg","setSuccessMsg","regions","MAX_FILE_SIZE_MB","MAX_TOTAL_FILES","forEach","url","URL","revokeObjectURL","handleImageChange","e","files","target","Array","from","length","value","newImageFiles","newPreviewUrls","validationError","file","size","name","push","createObjectURL","resetForm","fileInput","document","getElementById","handleSubmit","preventDefault","cleanRegion","replace","uploadedImagePublicUrls","uploadPromises","map","fileExt","split","pop","fileName","Date","now","Math","random","toString","substring","filePath","error","uploadError","storage","upload","cacheControl","upsert","console","Error","message","data","urlData","getPublicUrl","publicUrl","urls","Promise","all","reviewData","post_title","post_detail","post_region","comment_count","post_like","post_dislike","post_image","insertData","insertError","insert","select","log","handleCancel","className","children","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","placeholder","onChange","region","index","onClick","accept","multiple","disabled","src","alt","_c","$RefreshReg$"],"sources":["D:/Uni/ba/BA_webboard/cafe/src/component/CreateReview.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport supabase from './connect'; // Make sure this path is correct\nimport '../style/CreateReview.css'; // Import the CSS file\n\nconst CreateReview = () => {\n  const [title, setTitle] = useState('');\n  const [reviewText, setReviewText] = useState('');\n  const [selectedRegion, setSelectedRegion] = useState(null);\n  const [imageFiles, setImageFiles] = useState([]); // Changed to array\n  const [imagePreviewUrls, setImagePreviewUrls] = useState([]); // Changed to array\n  const [uploading, setUploading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n  const [successMsg, setSuccessMsg] = useState('');\n\n  const regions = ['North', 'South', 'Central', 'West', 'East'];\n  const MAX_FILE_SIZE_MB = 5;\n  const MAX_TOTAL_FILES = 5; // Optional: Limit total number of files\n\n  useEffect(() => {\n    // Clean up object URLs for image previews\n    return () => {\n      imagePreviewUrls.forEach(url => URL.revokeObjectURL(url));\n    };\n  }, [imagePreviewUrls]); // Dependency on the array itself\n\n  const handleImageChange = (e) => {\n    setErrorMsg('');\n    setSuccessMsg('');\n\n    const files = e.target.files ? Array.from(e.target.files) : [];\n\n    if (!files.length) {\n      // Clear existing if no new files are chosen (e.g., user cancels file dialog)\n      // Or, you might want to append if that's the desired UX.\n      // For simplicity, let's replace.\n      imagePreviewUrls.forEach(url => URL.revokeObjectURL(url));\n      setImageFiles([]);\n      setImagePreviewUrls([]);\n      return;\n    }\n\n    // Optional: Limit total number of files\n    if (files.length > MAX_TOTAL_FILES) {\n        setErrorMsg(`You can upload a maximum of ${MAX_TOTAL_FILES} images.`);\n        e.target.value = null; // Reset file input\n        return;\n    }\n\n    const newImageFiles = [];\n    const newPreviewUrls = [];\n    let validationError = false;\n\n    for (const file of files) {\n      if (file.size > MAX_FILE_SIZE_MB * 1024 * 1024) {\n        setErrorMsg(`Image \"${file.name}\" exceeds ${MAX_FILE_SIZE_MB}MB limit.`);\n        validationError = true;\n        break; // Stop processing further files\n      }\n      newImageFiles.push(file);\n    }\n\n    if (validationError) {\n      // Don't set any files if one is invalid\n      imagePreviewUrls.forEach(url => URL.revokeObjectURL(url)); // Revoke any previous previews\n      setImageFiles([]);\n      setImagePreviewUrls([]);\n      e.target.value = null; // Reset file input\n      return;\n    }\n\n    // Revoke old URLs before creating new ones\n    imagePreviewUrls.forEach(url => URL.revokeObjectURL(url));\n\n    // Create new preview URLs\n    newImageFiles.forEach(file => newPreviewUrls.push(URL.createObjectURL(file)));\n\n    setImageFiles(newImageFiles);\n    setImagePreviewUrls(newPreviewUrls);\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setReviewText('');\n    setSelectedRegion(null);\n    setImageFiles([]);\n    imagePreviewUrls.forEach(url => URL.revokeObjectURL(url)); // Clean up\n    setImagePreviewUrls([]);\n    // Reset file input visually\n    const fileInput = document.getElementById('images'); // Note ID change if you change it\n    if (fileInput) fileInput.value = null;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setUploading(true);\n    setErrorMsg('');\n    setSuccessMsg('');\n\n    if (!title || !reviewText || !selectedRegion) {\n      setErrorMsg('Please fill in Title, Review, and select a Region.');\n      setUploading(false);\n      return;\n    }\n\n    const cleanRegion = selectedRegion?.replace(/[0-9]/g, '');\n    const uploadedImagePublicUrls = [];\n\n    // 1. Upload images if selected\n    if (imageFiles.length > 0) {\n      const uploadPromises = imageFiles.map(async (file) => {\n        const fileExt = file.name.split('.').pop();\n        // Add more uniqueness to filename to avoid collisions if multiple users upload simultaneously\n        const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 10)}.${fileExt}`;\n        const filePath = `public/${fileName}`; // Path in bucket\n\n        const { error: uploadError } = await supabase.storage\n          .from('image') // YOUR_BUCKET_NAME\n          .upload(filePath, file, {\n            cacheControl: '3600',\n            upsert: false, // Important: false to avoid overwriting if a hash collision somehow occurs\n          });\n\n        if (uploadError) {\n          console.error(`Image Upload Error for ${file.name}:`, uploadError);\n          // Throw an error to be caught by Promise.all\n          throw new Error(`Failed to upload ${file.name}: ${uploadError.message}`);\n        }\n\n        const { data: urlData } = supabase.storage\n          .from('image') // YOUR_BUCKET_NAME\n          .getPublicUrl(filePath);\n\n        if (!urlData || !urlData.publicUrl) {\n          console.error(`Error getting public URL for ${file.name}`);\n          throw new Error(`Image ${file.name} uploaded, but could not get its URL.`);\n        }\n        return urlData.publicUrl;\n      });\n\n      try {\n        const urls = await Promise.all(uploadPromises);\n        uploadedImagePublicUrls.push(...urls);\n      } catch (error) {\n        // Error from one of the promises in Promise.all\n        setErrorMsg(error.message + ' Review not posted.');\n        setUploading(false);\n        return;\n      }\n    }\n\n    // 2. Prepare review data\n    const reviewData = {\n      post_title: title,\n      post_detail: reviewText,\n      post_region: cleanRegion,\n      comment_count: 0, // Initialize comment count to 0\n      post_like: 0,    // Initialize likes to 0\n      post_dislike: 0, // Initialize dislikes to 0\n      // user_id: supabase.auth.user()?.id, // Example\n    };\n\n    if (uploadedImagePublicUrls.length > 0) {\n      // IMPORTANT: Ensure 'post' table has a column like 'post_image_urls' (TEXT[] type)\n      reviewData.post_image = uploadedImagePublicUrls;\n    }\n\n    // 3. Insert review into the database\n    const { data: insertData, error: insertError } = await supabase\n      .from('post') // YOUR_TABLE_NAME for reviews\n      .insert([reviewData])\n      .select();\n\n    setUploading(false);\n\n    if (insertError) {\n      console.error('Insert Error:', insertError);\n      setErrorMsg(`Failed to post review: ${insertError.message}. Check console. Possible issues: RLS, missing/mismatched columns (e.g., 'post_image_urls' not TEXT[]).`);\n    } else {\n      console.log('Inserted Review:', insertData);\n      setSuccessMsg('Review posted successfully!');\n      resetForm();\n    }\n  };\n\n  const handleCancel = () => {\n    resetForm();\n    setErrorMsg('');\n    setSuccessMsg('');\n    console.log('Form cancelled');\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"formCard\">\n        <h2 className=\"heading\">Create New Review</h2>\n\n        {errorMsg && <p className=\"errorText\">{errorMsg}</p>}\n        {successMsg && <p className=\"successText\">{successMsg}</p>}\n\n        <form onSubmit={handleSubmit}>\n          <div>\n            <label htmlFor=\"title\" className=\"label\">Title</label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              className=\"input\"\n              placeholder=\"E.g. Amazing Italian Restaurant in Downtown\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </div>\n\n          <div>\n            <label className=\"label\">Region</label>\n            <div className=\"regionContainer\">\n              {regions.map((region, index) => (\n                <button\n                  key={index}\n                  type=\"button\"\n                  className={`regionButton ${selectedRegion === region + index ? 'selectedRegionButton' : ''}`}\n                  onClick={() => {\n                    setSelectedRegion(region + index);\n                    setErrorMsg('');\n                  }}\n                >\n                  {region}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"review\" className=\"label\">Review</label>\n            <textarea\n              id=\"review\"\n              className=\"textarea\"\n              placeholder=\"Share your experience...\"\n              value={reviewText}\n              onChange={(e) => setReviewText(e.target.value)}\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"images\" className=\"label\">\n              Upload Images (Optional, max {MAX_FILE_SIZE_MB}MB each, {MAX_TOTAL_FILES} files max)\n            </label>\n            <input\n              type=\"file\"\n              id=\"images\"\n              accept=\"image/png, image/jpeg, image/gif\"\n              multiple\n              onChange={handleImageChange}\n              className=\"input\"\n              disabled={uploading}\n            />\n            {imagePreviewUrls.length > 0 && (\n              <div className=\"imagePreviewContainer\">\n                {imagePreviewUrls.map((url, index) => (\n                  <img\n                    key={index}\n                    src={url}\n                    alt={`Preview ${index + 1}`}\n                    className=\"imagePreview\"\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n\n          <div className=\"buttonContainer\">\n            <button\n              type=\"button\"\n              className=\"cancelButton\"\n              onClick={handleCancel}\n              disabled={uploading}\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"postButton\"\n              disabled={uploading}\n            >\n              {uploading ? 'Posting...' : 'Post Review'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateReview;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}