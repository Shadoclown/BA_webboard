{"ast":null,"code":"import React,{useEffect,useState}from'react';import supabase from'./connect';import{useParams,useNavigate}from'react-router-dom';import'../style/Regions.css';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const Regions=()=>{const[posts,setPosts]=useState([]);const[loading,setLoading]=useState(true);const[regionName,setRegionName]=useState('');const{id}=useParams();// Get region ID from URL\nconst navigate=useNavigate();// Map region IDs to region names\nconst regionMap={'1':'North','2':'East','3':'South','4':'West','5':'Central','6':'Isaan'};useEffect(()=>{fetchRegionPosts();},[id]);const fetchRegionPosts=async()=>{try{setLoading(true);// Set region name based on ID\nsetRegionName(regionMap[id]||'Unknown Region');// Fetch posts filtered by region\nconst{data,error}=await supabase.from('post').select(`\n          *,\n          user:user_id (username)\n        `).eq('post_region',regionMap[id]);if(error){console.error('Supabase error:',error);throw new Error(`Failed to fetch posts. Supabase error: ${error.message}`);}setPosts(data||[]);}catch(error){console.error('Error fetching posts:',error.message);alert(`Error fetching posts: ${error.message}`);}finally{setLoading(false);}};const handleLike=async postId=>{try{// Check if user is logged in\nconst{data:{user}}=await supabase.auth.getUser();if(!user){alert('Please log in to like posts');return;}// Update post likes in the database\nconst{error}=await supabase.from('post').update({post_like:posts.find(post=>post.post_id===postId).post_like+1}).eq('post_id',postId);if(error)throw error;// Update local state\nsetPosts(posts.map(post=>post.post_id===postId?{...post,post_like:post.post_like+1}:post));}catch(error){console.error('Error liking post:',error);alert('Error liking post. Please try again.');}};const getRandomDateForPost=postId=>{const seed=postId%90;const now=new Date();const randomDate=new Date(now);randomDate.setDate(now.getDate()-(seed+1));return randomDate;};const formatDate=dateString=>{const date=new Date(dateString);const month=date.toLocaleString('default',{month:'short'});const day=date.getDate();return`${month} ${day}`;};const handlePostClick=postId=>{navigate(`/post/${postId}`);};return/*#__PURE__*/_jsxs(\"div\",{className:\"region-container\",children:[/*#__PURE__*/_jsxs(\"h1\",{className:`region-title region-${regionName}`,children:[regionName,\" Region Cafes and Restaurants\"]}),loading?/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Loading...\"}):posts.length>0?/*#__PURE__*/_jsx(\"div\",{className:\"region-posts-grid\",children:posts.map(post=>{var _post$user,_post$user$username,_post$user2;return/*#__PURE__*/_jsxs(\"div\",{className:`region-post-card region-${regionName}`,onClick:()=>handlePostClick(post.post_id),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"region-post-header\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"region-user-avatar\",children:((_post$user=post.user)===null||_post$user===void 0?void 0:(_post$user$username=_post$user.username)===null||_post$user$username===void 0?void 0:_post$user$username[0].toUpperCase())||'A'}),/*#__PURE__*/_jsxs(\"div\",{className:\"region-post-meta\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"region-username\",children:((_post$user2=post.user)===null||_post$user2===void 0?void 0:_post$user2.username)||'Anonymous'}),/*#__PURE__*/_jsx(\"div\",{className:\"region-post-date\",children:formatDate(post.created_at||getRandomDateForPost(post.post_id))})]})]}),/*#__PURE__*/_jsx(\"h3\",{className:\"region-post-title\",children:post.post_title}),/*#__PURE__*/_jsx(\"p\",{className:\"region-post-content\",children:post.post_detail}),/*#__PURE__*/_jsxs(\"div\",{className:\"region-post-footer\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"region-tag\",children:post.post_region}),/*#__PURE__*/_jsxs(\"div\",{className:\"region-like-container\",onClick:()=>handleLike(post.post_id),children:[/*#__PURE__*/_jsx(\"span\",{className:\"region-like-icon\",children:\"\\uD83D\\uDC4D\"}),/*#__PURE__*/_jsx(\"span\",{className:\"region-like-count\",children:post.post_like||0})]})]})]},post.post_id);})}):/*#__PURE__*/_jsxs(\"div\",{className:\"region-no-posts\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"No posts found for \",regionName,\" region.\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>navigate('/browse'),className:\"region-browse-button\",children:\"Browse All Posts\"})]})]});};export default Regions;","map":{"version":3,"names":["React","useEffect","useState","supabase","useParams","useNavigate","jsxs","_jsxs","jsx","_jsx","Regions","posts","setPosts","loading","setLoading","regionName","setRegionName","id","navigate","regionMap","fetchRegionPosts","data","error","from","select","eq","console","Error","message","alert","handleLike","postId","user","auth","getUser","update","post_like","find","post","post_id","map","getRandomDateForPost","seed","now","Date","randomDate","setDate","getDate","formatDate","dateString","date","month","toLocaleString","day","handlePostClick","className","children","length","_post$user","_post$user$username","_post$user2","onClick","username","toUpperCase","created_at","post_title","post_detail","post_region"],"sources":["D:/Uni/ba/BA_webboard/cafe/src/component/Regions.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport supabase from './connect';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport '../style/Regions.css';\r\n\r\nconst Regions = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [regionName, setRegionName] = useState('');\r\n  const { id } = useParams(); // Get region ID from URL\r\n  const navigate = useNavigate();\r\n\r\n  // Map region IDs to region names\r\n  const regionMap = {\r\n    '1': 'North',\r\n    '2': 'East',\r\n    '3': 'South',\r\n    '4': 'West',\r\n    '5': 'Central',\r\n    '6': 'Isaan'\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchRegionPosts();\r\n  }, [id]);\r\n\r\n  const fetchRegionPosts = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Set region name based on ID\r\n      setRegionName(regionMap[id] || 'Unknown Region');\r\n\r\n      // Fetch posts filtered by region\r\n      const { data, error } = await supabase\r\n        .from('post')\r\n        .select(`\r\n          *,\r\n          user:user_id (username)\r\n        `)\r\n        .eq('post_region', regionMap[id]);\r\n\r\n      if (error) {\r\n        console.error('Supabase error:', error);\r\n        throw new Error(`Failed to fetch posts. Supabase error: ${error.message}`);\r\n      }\r\n\r\n      setPosts(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching posts:', error.message);\r\n      alert(`Error fetching posts: ${error.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleLike = async (postId) => {\r\n    try {\r\n      // Check if user is logged in\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n\r\n      if (!user) {\r\n        alert('Please log in to like posts');\r\n        return;\r\n      }\r\n\r\n      // Update post likes in the database\r\n      const { error } = await supabase\r\n        .from('post')\r\n        .update({ post_like: posts.find(post => post.post_id === postId).post_like + 1 })\r\n        .eq('post_id', postId);\r\n\r\n      if (error) throw error;\r\n\r\n      // Update local state\r\n      setPosts(posts.map(post =>\r\n        post.post_id === postId\r\n          ? { ...post, post_like: post.post_like + 1 }\r\n          : post\r\n      ));\r\n    } catch (error) {\r\n      console.error('Error liking post:', error);\r\n      alert('Error liking post. Please try again.');\r\n    }\r\n  };\r\n\r\n  const getRandomDateForPost = (postId) => {\r\n    const seed = postId % 90;\r\n    const now = new Date();\r\n    const randomDate = new Date(now);\r\n    randomDate.setDate(now.getDate() - (seed + 1));\r\n    return randomDate;\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const month = date.toLocaleString('default', { month: 'short' });\r\n    const day = date.getDate();\r\n    return `${month} ${day}`;\r\n  };\r\n\r\n  const handlePostClick = (postId) => {\r\n    navigate(`/post/${postId}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"region-container\">\r\n      <h1 className={`region-title region-${regionName}`}>{regionName} Region Cafes and Restaurants</h1>\r\n      \r\n      {loading ? (\r\n        <div className=\"loading\">Loading...</div>\r\n      ) : posts.length > 0 ? (\r\n        <div className=\"region-posts-grid\">\r\n          {posts.map(post => (\r\n            <div key={post.post_id} className={`region-post-card region-${regionName}`} onClick={() => handlePostClick(post.post_id)}>\r\n              <div className=\"region-post-header\">\r\n                <div className=\"region-user-avatar\">\r\n                  {post.user?.username?.[0].toUpperCase() || 'A'}\r\n                </div>\r\n                <div className=\"region-post-meta\">\r\n                  <div className=\"region-username\">{post.user?.username || 'Anonymous'}</div>\r\n                  <div className=\"region-post-date\">\r\n                    {formatDate(post.created_at || getRandomDateForPost(post.post_id))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <h3 className=\"region-post-title\">{post.post_title}</h3>\r\n              <p className=\"region-post-content\">{post.post_detail}</p>\r\n\r\n              <div className=\"region-post-footer\">\r\n                <div className=\"region-tag\">{post.post_region}</div>\r\n                <div className=\"region-like-container\" onClick={() => handleLike(post.post_id)}>\r\n                  <span className=\"region-like-icon\">üëç</span>\r\n                  <span className=\"region-like-count\">{post.post_like || 0}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"region-no-posts\">\r\n          <p>No posts found for {regionName} region.</p>\r\n          <button onClick={() => navigate('/browse')} className=\"region-browse-button\">\r\n            Browse All Posts\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Regions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}